name: Build and Deploy Forge Component Library

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Forge CLI
      run: npm install -g forge-cli@latest
    
    - name: Validate components
      run: forge validate
    
    - name: Build component library
      run: forge build --verbose
    
    - name: Run tests
      run: npm test
      continue-on-error: true
    
    - name: Run linting
      run: npm run lint
      continue-on-error: true
    
    - name: Generate dependency report
      run: |
        echo "## 📦 Component Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        
        COMPONENT_COUNT=$(forge list --json | jq 'length')
        echo "| Components | $COMPONENT_COUNT |" >> $GITHUB_STEP_SUMMARY
        
        CATEGORY_COUNT=$(forge list --json | jq '[.[].category] | unique | length')
        echo "| Categories | $CATEGORY_COUNT |" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🏷️ Components by Category" >> $GITHUB_STEP_SUMMARY
        forge list --json | jq -r 'group_by(.category) | .[] | "- **\(.[0].category)**: \(length) components"' >> $GITHUB_STEP_SUMMARY
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: forge-build
        path: public/
        retention-days: 30
    
    - name: Setup Pages
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: actions/configure-pages@v4
    
    - name: Upload to GitHub Pages
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: actions/upload-pages-artifact@v3
      with:
        path: public

  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
    
    - name: Comment deployment URL
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 **Component Library Deployed!**
            
            📖 **Documentation**: ${{ steps.deployment.outputs.page_url }}
            📦 **Registry**: ${{ steps.deployment.outputs.page_url }}registry.json
            
            Install components from this build:
            \`\`\`bash
            forge add button --registry ${{ steps.deployment.outputs.page_url }}
            \`\`\`
            `
          })

  test-components:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Forge CLI
      run: npm install -g forge-cli@latest
    
    - name: Test component installation
      run: |
        # Create a test project
        mkdir test-project
        cd test-project
        npm init -y
        
        # Try installing each component
        forge list --json | jq -r '.[].name' | while read component; do
          echo "Testing component: $component"
          forge add "$component" --registry ../public/ || echo "Failed to install $component"
        done

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Run security audit
      run: npm audit --audit-level=high
      continue-on-error: true
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD